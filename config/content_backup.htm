<h1>Introduction</h1>
<p>Leader: <a href="https://mdecp2018.github.io/site-s40723145">40723145</a>(期中自評成績:80)</p>
<p>Member: <a href="https://mdecp2018.github.io/site-s40723112">40723112</a>(期中自評成績:63)</p>
<p>                <a href="https://mdecp2018.github.io/site-s40723120">40723120</a>(期中自評成績:75)</p>
<p>                <a href="https://mdecp2018.github.io/site-s40723144">40723144</a>(期中自評成績:75)</p>
<p>                <a href="https://mdecp2018.github.io/site-s40723147">40723147</a>(期中自評成績:80)</p>
<p>                <a href="https://mdecp2018.github.io/site-s40723150">40723150</a>(期中自評成績:80)</p>
<p></p>
<p>本倉儲位於:  <a href="https://github.com/mdecp2018/finalproject-ag3">https://github.com/mdecp2018/finalproject-ag3</a> </p>
<p></p>
<h1>Topic</h1>
<p><span>CMSimfly上加入</span><a href="http://www.tipue.com/search/">tipue search</a><span>功能</span></p>
<p><span><img alt="" height="115" src="/images/th.jpg" width="205"/><img alt="" height="114" src="/images/search.jpg" width="137"/></span></p>
<p><span>如此一來便可以提升閱讀效率</span></p>
<p><span>更可使閱讀更隨心所欲</span></p>
<p><span><img alt="" height="133" src="/images/shutterstock_101971000-S.jpg" width="199"/></span></p>
<p><span>參考資料：<a href="http://www.tipue.com/search/help/?d=1">Tipuesearch</a>、 <a href="https://www.quora.com/How-can-I-extract-only-text-data-from-HTML-pages">Quora</a></span></p>
<h1>Synopsis</h1>
<p>CMSifly 在崁入 TinyMCE4 執行文字內容編輯的網際內容管理系統</p>
<h2>CMSimfly</h2>
<p>CMSifly 是利用 Beatifulsoup4 對 config/content.html 進行分頁後，用 TinyMCE4 進行文字內容編輯，進行網際內容管理。 我們在近端內容管理系統裡面加入Tipuesearch 功能</p>
<h2>Beautiful Soup</h2>
<p>Beautifulsoup 主要功能是把 HTML 或 XML 的文件提取到 Python 的程式庫。它能夠通過你喜歡的轉換器實現慣用的文檔導航、查詢、修改檔案的方式。<span>Beautifulsoup</span><span>  可以提高你的工作效率。</span></p>
<p><span>舉例：</span></p>
<p>如果你的檔案在 Python 2.7 和 <span>Python 3.2 中執行，執行完的結果是一樣的。</span><span></span></p>
<p><span>為什麼用 Beautiful Soup 可以提高效率?</span></p>
<div><span>Beautiful Soup 對文檔的解析速度不會比它所依賴的解析器（</span><span> </span><span>html5lib 或 Python</span>）更快。如果對計算時間要求很高或需要較快的速度讀取檔案，那麽就應該直接使用  lxml </div>
<div><span> </span></div>
<div><span>換句話說,還有提高 Beautiful Soup 效率的辦法，就是使用 lxml 當作解析器。Beautiful Soup 用 lxml 做解析器比用 html5lib 或 Python 內置解析器速度快很多.</span></div>
<div><span> </span></div>
<div><span>安裝 cchardet 後文檔的解碼的編碼檢測會速度更快</span></div>
<div><span> </span></div>
<div><span>解析部分文檔不會節省多少解析時間，但是會節省很多記憶體的使用</span><span>，並且搜索時也會變得更快。</span></div>
<p></p>
<h2>TinyMCE4</h2>
<p>TinyMCE4 是一個可以網路應用上的文字編輯器</p>
<p>如何將 TinyMCE4 崁入?</p>
<p>Step 1 :  插入 TinyMCE4 的腳本</p>
<p><span></span><code class="highlighter-rouge">&lt;head&gt;</code><span>在HTML頁面中插入這行程式</span><span>碼並鏈接到 tinymce.min.js 文件：</span></p>
<div class="language-html highlighter-rouge">
<div class="highlight">
<pre class="prettyprint prettyprinted"><code></code></pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/tinymce4/tinymce/tinymce.min.js"&gt;&lt;/script&gt;</pre>
<pre class="prettyprint prettyprinted">Tips：Step 2 包含 HTML 完整的程式碼。</pre>
<p>Step 2 : 將 TinyMCE 初始化為 Web 表單的一部分</p>
<pre class="prettyprint prettyprinted"></pre>
</div>
</div>
<p><span>使用包含的腳本，在網頁中的任何元素（或元素）上初始化 TinyMCE。</span></p>
<p>由於 TinyMCE 允許通過 CSS 選擇器識別可替換元素，因此唯一的要求是傳遞包含選擇的對象 tinymce.init(  )。</p>
<p><span>在這個例子中，取代 </span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;textarea id='mytextarea'&gt;</pre>
<p><span>由選擇通過與 TinyMCE 的編輯器實例</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">'#mytextarea'</pre>
<p><span>來</span><code class="highlighter-rouge">tinymce.init()</code><span>。</span></p>
<div class="language-html highlighter-rouge">
<div class="highlight">
<pre class="prettyprint prettyprinted"><code></code></pre>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;script src='http://cloud.tinymce.com/5-testing/tinymce.min.js'&gt;&lt;/script&gt;
  &lt;script&gt;
  tinymce.init({
    selector: '#mytextarea'
  });
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;TinyMCE Quick Start Guide&lt;/h1&gt;
  &lt;form method="post"&gt;
    &lt;textarea id="mytextarea"&gt;Hello, World!&lt;/textarea&gt;
  &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</div>
</div>
<p><span>Step 3 : 用 POST 表單儲存內容</span></p>
<p>當&lt;form&gt;被提交後，TinyMCE 的編輯器模仿一個普通的 HTML 行為  &lt;textarea&gt; 過程中 <code class="highlighter-rouge">POST</code> 。在用戶的表單處理程序中，提交的內容可以與從常規創建的內容相同的方式處理  &lt;textarea&gt; 。</p>
<p><span>這就是它的全部！</span></p>
<p><span>要下載 TinyMCE 並在本地</span><span>安裝</span><span>，“ </span><span>簡介和入門</span><span>指南” 中的“ 高級安裝選擇”頁面有說明。本文檔還提供了有關 TinyMCE 功能的信息，例如高級安裝選項，使用插件，學習內容過濾和拼寫檢查。</span></p>
<p>資料來源 :  <a href="https://www.tiny.cloud/">TinyMCE</a></p>
<h1>Report</h1>
<p><a href="/downloads/Final Report.pdf">Final Report</a></p>
<h1>Final video</h1>
<p>李冠廷(40723112)</p>
<p><iframe allowfullscreen="allowfullscreen" height="196" src="//www.youtube.com/embed/2ZJKL5jEu6Y" width="350"></iframe></p>
<p>林靖浩(40723120)</p>
<p>廖豪樹(40723144)</p>
<p>劉光智(40723145)</p>
<p><iframe allowfullscreen="allowfullscreen" height="202" src="//www.youtube.com/embed/4zjrrU7CCiA" width="360"></iframe></p>
<p>蔡博宇(40723147)</p>
<p><iframe allowfullscreen="allowfullscreen" height="196" src="//www.youtube.com/embed/rTx4FXr9tgg?feature=youtu" width="350"></iframe></p>
<p>簡國龍(40723150)</p>
<h1>Python 語法</h1>
<p>Python 3 官方教材: <a href="https://docs.python.org/3/index.html">https://docs.python.org/3/index.html</a> </p>
<p>Python tutorial: <a href="https://docs.python.org/3/tutorial/index.html">https://docs.python.org/3/tutorial/index.html</a> (英文)</p>
<p>Python 教學: <a href="https://python-doc-tw.github.io/tutorial/index.html">https://python-doc-tw.github.io/tutorial/index.html</a> </p>
<p>網頁上的 Python - Brython: <a href="https://www.brython.info/static_doc/en/intro.html">https://www.brython.info/static_doc/en/intro.html</a>  (解譯式)</p>
<p>網頁上的 Python GUI- Flexx: <a href="https://flexx.readthedocs.io/en/stable/">https://flexx.readthedocs.io/en/stable/</a> (轉譯式)</p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<!-- Cango 程式庫 -->
<script src="/static/Cango-13v08-min.js"></script>
<script src="/static/CangoAxes-4v01-min.js"></script>
<script src="/static/gearUtils-05.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<h4>開始練習 print() 用法, 並著手建立函式</h4>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

def helloWorld():
    print("Hello World!")

helloWorld()

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)

my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)

def myfun():
    yield 1
    yield 2
    yield 3

for i in myfun():
    print(i)

x = iter(myfun())
y = list(myfun())

a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42

print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type

print("#####################################################")

print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3"></script>
</p>